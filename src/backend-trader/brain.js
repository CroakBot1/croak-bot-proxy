// brain.js

// ðŸ”’ Core brain dependencies
const logger = require('./logger'); // ðŸ”’ DO NOT REMOVE
const { fetchMarketSnapshot } = require('./priceFetcher'); // ðŸ”’ DO NOT REMOVE

// ðŸ§  Brain Memory Scoring System (placeholder, dynamic version optional)
let brainMemoryScore = 50;

// âœ… Decision logic for BUY
function shouldBuy(snapshot) {
  try {
    const price = snapshot.price;
    const trend = snapshot.trend || 'neutral';

    if (trend === 'bullish' && brainMemoryScore > 45) {
      logger.info('ðŸ“ˆ BUY Signal: Trend bullish & memory score above 45');
      return true;
    }

    if (price < snapshot.avgPrice && brainMemoryScore >= 50) {
      logger.info('ðŸ“‰ BUY Signal: Price below average with healthy memory score');
      return true;
    }

    return false;
  } catch (err) {
    logger.error('ðŸ’¥ Error in shouldBuy logic:', err);
    return false;
  }
}

// âœ… Decision logic for SELL
function shouldSell(snapshot) {
  try {
    const price = snapshot.price;
    const trend = snapshot.trend || 'neutral';

    if (trend === 'bearish' && brainMemoryScore < 60) {
      logger.info('ðŸ“‰ SELL Signal: Trend bearish & memory score below 60');
      return true;
    }

    if (price > snapshot.avgPrice && brainMemoryScore < 50) {
      logger.info('ðŸ“ˆ SELL Signal: Price above average with weak memory score');
      return true;
    }

    return false;
  } catch (err) {
    logger.error('ðŸ’¥ Error in shouldSell logic:', err);
    return false;
  }
}

// ðŸ§  Brain Evolution Memory Adjuster
function adjustBrainMemory(result) {
  if (result === 'win') {
    brainMemoryScore = Math.min(100, brainMemoryScore + 3);
  } else if (result === 'loss') {
    brainMemoryScore = Math.max(0, brainMemoryScore - 5);
  }

  logger.info(`ðŸ§  Brain Memory Updated: ${brainMemoryScore}`);
}

// ðŸ“¤ Export
module.exports = {
  shouldBuy,
  shouldSell,
  adjustBrainMemory,
  brainMemoryScore,
};
